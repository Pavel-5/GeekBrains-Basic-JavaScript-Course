a)
if (!("a" in window)) {
  var a = 1;
}
alert(a);

На сколько я понимаю, JS на моменте предварительного просмотра кода создает области видимости и в них закладывает переменные, которые прописаны в коде.
На момент 'if' переменная 'a' уже создана, несмотря на то, что в коде переменная создается только внутри блока 'if'.
Из-за этого '("a" in window) = true', а следовательно '!("a" in window) = false', это значит, что переменной 'a' ничего не присвоилось => 'a = undefined'.


b)
var b = function a(x) {
  x && a(--x);
}
alert(a);

'a' не определена.
В данном случае переменной 'a' не существует.
Если бы было написано 'function a(x) {...}', тогда создалась бы переменная 'a', в которую записалась бы данная функция.
И по сути запись 'function a(x) {...}' равнозначна записи 'var a = function a(x) {...}'.


c)
function a(x) {
  return x * 2;
}
var a;
alert(a);

'a' содержит в себе функцию (пункт b), так как никакого другого значения в неё не клалось.
Если бы была запись 'var a = 2', то 'alert' выводил бы '2'.


d)
function​ ​b​(x, y, a) {
​  arguments​[​2​] = ​10​;
  alert(a);
}
b(​1​, ​2​, 3​);

Массив 'arguments' хранит в себе параметры, передаваемые в функцию.
'arguments = [x, y, a]', в данном случае 'arguments = [1, 2, 3]', тоесть 'arguments[0]' это и есть параметр 'x' и т.д.
Во второй строке кода массив изменяется 'arguments = [1, 2, 10]', а следовательно изменяется параметр 'a = 10'.


e)
function​ ​a​() {
  alert(​this​);
}
a.call(​null​);

При таком вызове функции 'a.call(​null​)' в 'this' всегда будет лежать объект 'Window'.